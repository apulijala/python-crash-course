12:31

Testing a method.

example 
import unittest
from name_function import get_formatted_name --> # There is file called name_function.py and method
						 # called get_formatted name 
class NameTestCase(unittest.TestCase): 
	def test_first_last_name(self): 
		formatted_name = get_formatted_name('janis', 'joplin')
		self.assertEquals(formatted_name, 'Janis Joplin')




Notes
1) First setting up a test case. 
a) Declare a class Which inherits from unittest.TestCase
b) Name the test method test_<nay name>
c) write the following code to run test case automatically.
if __name__ == '__main__':
	unittest.main()
2) To read input with a prompt. use input function
example. 

first = input("Enter the First name? ")

3) To do the string substitution use the following syntax. 

f "{first} {last}"
f  "This is formatted name {formatted_name}"

4) To get a properly formatted string use title method on the string 
formatted_name = f"{first} {last}"
return formatted_name.title()

example if first is arvind and last is pulijala
formatted name is Arvind Pulijala

5) To get the string functions within the editor. 
use type cast like this (str)city_country.title()
and then do ctrl + space. 

Requirements. 
1) Project. 
Write a method called get_formatted_name in a file called formatted_name.py
which takes first and last name as the input 
and retutns full name (first name start with Upper case and last name start with upper case)

Write a for loop to the above function. 
Sample interaction below. 
Enter 'q' at any time to quit.

Please give me a first name: janis
Please give me a last name: joplin
        Neatly formatted name: Janis Joplin.

Please give me a first name: bob
Please give me a last name: dylan
        Neatly formatted name: Bob Dylan.

Please give me a first name: q

2) Write a file called test_name_function.py 
which tests first_and_last_name

3) modify get_formatted_name to take middle name. 
which passes first, middle, last and returns the correct result. 
Test 
get_formatted_name(first, middle, last)

Deal with the faliing test, by modifying the method appropriatedly.

4) Write a passing test case. 




TRY IT YOURSELF 13:40


11-1. City, Country: Write a function that accepts two parameters: a city name and a country name. The function 
should return a single string of the form City, Country, such as Santiago, Chile. 
Store the function in a module called city_functions.py.

Create a file called test_cities.py that tests the function you just wrote 
(remember that you need to import unittest and the function you want to test). 
Write a method called test_city_country() to verify that calling your function with values 
such as 'santiago' and 'chile' results in the correct string. Run test_cities.py, 
and make sure test_city_country() passes.

11-2. Population: Modify your function so it requires a third parameter, population. It should now return a 
single string of the form City, Country – population xxx, 
such as Santiago, Chile – population 5000000. 
Run test_cities.py again. Make sure test_city_country() fails this time.

Modify the function so the population parameter is optional. 
Run test_cities.py again, and make sure test_city_country() passes again.

Write a second test called test_city_country_population() that verifies you can call your function 
with the values 'santiago', 'chile', and 'population=5000000'. Run test_cities.py again, and make sure this new test passes.

14:16 done. 


14:17
Testing a classs. 
To declare a class in python use the following syntax. 

1)  class AnonymousSurvey(): if it is extending from another class.
it is class TestClass(unittest.TestCase):

2) To declare a constructor use __init__ method. 

__init__(self, question) # question is an argument into the constructor.

3) to assign instance variables use. 
self.question = question
self.responses = [] # an emty array 

to use individual method. 
4) show_question(self):
	print self_qeustion 


5) store_responses(self, response) # response is a method. 
	self.responses.


6) def show_results: 
	print("survey results")
	for response in self.responses:
		print(response)


7) to use an instance of a class or the object use a variable without a type. 
my_survey = AnyonymousSurvey(question)

8) When invoking a method don't use self . just call the mthoed with any arguments if any. 
my_survey.ask_question()
my_survey.store_responses(response)

9) Variables declared in class can be accessed directly.
example  self.assertEquals(self.employee.salary, 58500)
Where employee is Employee("Andrew", "Hughes", 50000) and salary was added as an attribute. 

self.last_name = last_name
self.salary = salary
    

Testing method in self of unittest.testcase
assertEquals(a, b , msg), assertNotEquals(a, b, msg), assertTrue(x, msg), assertFalse(y, msg)
assertIn(item, list), assertNotIn(item, list)
assertDictIn

To ignore a test case use or skip . Very useful when you have series of tests and ignore it. 
 @unittest.skip

Testing the class. 

1) is similar to testing a emthod. 
test each individual method. 

Apart from testing the method individually use 
setUp() method so that class can be indivudually used and nice way to factor out the code. 
For factoring out propertly. The variables and classes need to be assigned by using self. 
It will not work automatically without assignment. 
and method name should be setUp with U as upper case. 

  def setUp(self):
        question = "What Language did you learn first? "
        self.my_survey = AnyonymousSurvey(question)
        self.responses = ['English', 'Spanish', 'Mandarin']
       

Accessign the variables and methods from the test method. 

self.my_survey.store_responses(self.responses[0])
self.assertIn("English", self.my_survey.responses)


Project.
----------
Design an anonymous survey class which declares. 
which takes a question, stroes responses and prints the results. 
class should have a constructor which takes in a question and initilises responses to array method. 

method called store_responses which takes in a response and stores the response

method called print_survey which prints the survey results. 

Sample run of the test class. 
What language did you first learn to speak?
Enter 'q' at any time to quit.

Language: English
Language: Spanish
Language: English
Language: Mandarin
Language: q

Thank you to everyone who participated in the survey!
Survey results:
- English
- Spanish
- English
- Mandarin

Design a test class 
with the following methods. 
test_store_single_response with question as "What language did you first learn to speak?"

test_store_three-responses
with question as "What language did you first learn to speak?"


In another file, 
Factor out the test program you have written, so that the common class declaration is stored in 
setUp method. 
where ever possible use multi line comments 
""" """ 


11-3. Employee: Write a class called Employee. The __init__() method should take in a first name, a last name, 
and an annual salary, and store each of these as attributes. Write a method called give_raise()
that adds $5,000 to the annual salary by default but also accepts a different raise amount.

Write a test case for Employee. Write two test methods, test_give_default_raise() and test_give_custom_raise(). 
Use the setUp() method so you don’t have to create a new employee instance in each test method. 
Run your test case, and make sure both tests pass.

16:20 Chapter finished.
---------------------------
17:22 Chapter 2 start.
a) Python File is run through Python Interpreter to get the resultes. 
b) Python can be started using python.exe
c) Variables
d) python does not have a variable type. 
e) to declare a variable use 
message = "Hello Python Crash Course reader!"
variable type can be changed in middle 
message = 9 is possible. 
f) Strings are declared using either double or single quotes. 
"This is a string."
'This is also a string.'
use double quotes within single quotes
'I told my friend, "Python is my favorite language!"'
and single quotes within doule quotes.
"The language 'Python' is named after Monty Python, not the snake."

g) Changing Case in a String with Methods
name = "Anna Poltova"
name.upper()
name.lower()
name.title()
and other functions can be got by typecasting 
(str) into the lower case. 

h) Using Variables in Strings
first_name = "ada"
last_name = "lovelace"
message = f"Hello, {full_name.title()}!"

i) Adding Whitespace to Strings with Tabs or Newlines
"\tPython"
"Languages:\nPython\nC\nJavaScript"

j) Stripping Whitespace
favorite_language = ' python '
to remove white space. 
favorite_language.rstrip() # from right
favorite_language.lstrip() # from left
favorite_language.strip() # to remove from both the ends.

Numbers
k) add (+), subtract (-), multiply (*), and divide (/) integers 
2 + 3
3 - 2
2 * 3
3 / 2

To represent exponents.
3 ** 2

Floats
0.1 + 0.1

Integers and Floats
m) When you divide two integrs you always get a float. even if the result is an inte
ger
4/2

n) Underscores in Numbers
universe_age = 14_000_000_000
print(universe_age) should print 14000000000

o) Multiple Assignment
x, y, z = 0, 0, 0  will initialize x, y and z to zero

p) Constants
all capital letters 
MAX_CONNECTIONS = 5000

Comments
# for a single line comment. 

For multi line comments. 
"""

"""

Zen of python.
You can get by 
import this


Write a separate program to accomplish each of these exercises. Save each 
program with a filename that follows standard Python conventions, 
using lowercase letters and underscores, such as simple_message.py and simple_messages.py.

2-1. Simple Message: Assign a message to a variable, and then print that message.

2-2. Simple Messages: Assign a message to a variable, and print that message. Then 
change the value of the variable to a new message, and print the new message.


Save each of the following exercises as a separate file with a name like name_cases.py. If you get stuck, take a break or see the suggestions in Appendix C.

2-3. Personal Message: Use a variable to represent a person’s name, and print a message to that person. 
Your message should be simple, such as, “Hello Eric, would you like to learn some Python today?”

2-4. Name Cases: Use a variable to represent a person’s name, and then print that 
person’s name in lowercase, uppercase, and title case.

2-5. Famous Quote: Find a quote from a famous person you admire. Print the quote 
and the name of its author. Your output should look something like the following, including the quotation marks:

Albert Einstein once said, “A person who never made a mistake never tried anything new.”

2-6. Famous Quote 2: Repeat Exercise 2-5, but this time, represent the famous person’s name 
using a variable called famous_person. Then compose your message and represent it with a new variable called message. 
Print your message.

2-7. Stripping Names: Use a variable to represent a person’s name, and include some whitespace characters 
at the beginning and end of the name. Make sure you use each character combination, "\t" and "\n", at least once.

Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().

2-8. Number Eight: Write addition, subtraction, multiplication, and division operations 
that each result in the number 8. Be sure to enclose your operations in print() calls to see the results. 
You should create four lines that look like this:

print(5+3)

Your output should simply be four lines with the number 8 appearing once on each line.

2-9. Favorite Number: Use a variable to represent your favorite number. Then, using that variable,
create a message that reveals your favorite number. Print that message.

2-10. Adding Comments: Choose two of the programs you’ve written, and add at least one comment to each. 
If you don’t have anything specific to write because your programs are too simple at this point, 
just add your name and the current date at the top of each program file. Then write one sentence describing what the program doe


Chapter 3 and Chapter 4
-----------------------
19:08

1) Declaring a list 
bicycles = ['trek', 'cannondale', 'redline', 'specialized']

2) Accessing elements of a list. 
Index starts at 0 and you can use -ve index too.
print(bicycles[-1])
print(bicycles[1])
print(bicycles[3])

2a) Python has a special syntax for accessing the last element in a list. By asking for the item at index -1
Python always returns the last item in the list
num_array = [3, 4, 5, 89]
       print(num_array[-1]) and print(num_array[-2]) retunrs 5 and so on

3) Using individual values from a list. 
message = f"My first bicycle was a {bicycles[0].title()}."

Changing, Adding, and Removing Elements
-------------------
To append to end of a list.
motorcycles[0] = 'ducati'

Adding Elements to a List
Appending Elements to the End of a List
motorcycles.append('ducati')

Inserting Elements into a List
-------------------------
motorcycles = ['honda', 'yamaha', 'suzuki']
motorcycles.insert(0, 'ducati')

Removing Elements from a List
a) using del method.
del motorcycles[0]
del motorcycles[1]


b) Removing an Item Using the pop() Method will remove from the end 
of the list.
motorcycles = ['honda', 'yamaha', 'suzuki']
popped_motorcycle = motorcycles.pop()

c) Popping Items from any Position in a List
first_owned = motorcycles.pop(0)

Removing an Item by Value
motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']
motorcycles.remove('ducati')

Organizing a List
a) Sorting a List Permanently with the sort() Method
cars.sort()
Reverse sort
cars.sort(reverse=True)

Sorting a List Temporarily with the sorted() Function
print(sorted(cars))

Printing a List in Reverse Orde
cars.reverse()

Finding the Length of a List
cars = ['bmw', 'audi', 'toyota', 'subaru']
len(cars)

Chapter 4
----------
Looping Through an Entire List
for item in list_of_items:
magicians = ['alice', 'david', 'carolina']
for magician in magicians:
     print(magician)

Common errors:
1) Don't unindent unnecessarily
message = "Hello Python world!"
     print(message)

2) Indenting Unnecessarily After the Loop
 magicians = ['alice', 'david', 'carolina']
   for magician in magicians:
       print(f"{magician.title()}, that was a great trick!")
       print(f"I can't wait to see your next trick, {magician.title()}.\n")

       print("Thank you everyone, that was a great magic show!")

3) Forgetting the Colon
magicians = ['alice', 'david', 'carolina']
  for magician in magicians
       print(magician)

Making Numerical Lists
1) Using the range() Function
for value in range(1, 5):
    print(value)

2) Using range() to Make a List of Numbers
numbers = list(range(1, 6))
print(numbers)

3) Simple Statistics with a List of Numbers
digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
min(digits)
max(digits)
sum(digits)

List Comprehensions
1) A list comprehension allows you to generate this same list in just one line of code. 
squares = [value**2 for value in range(1, 11)]

Working with Part of a List
1) Slicing a List
players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[0:3])
['charles', 'martina', 'michael']

if firs index is omitted, then list is starting at 0
print(players[:4])

if last index is omitted the list will go to end of list.
players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[-3:])
This is for negative index.

5) Looping Through a Slice
for player in players[:3]:
       print(player.title())

6) Copying a list 
my_foods = ['pizza', 'falafel', 'carrot cake']
deep copy is 
friend_foods = my_foods[:]
friend_foods is a deep copy.

7) For shallow copy 
friend_foods = my_foods

8) Null in java is None in Python.

Tuples
Python refers to values that cannot change as immutable, and an immutable list is called a tuple.

Defining a Tuple
dimensions = (200, 50)
print(dimensions[0])
print(dimensions[1])

dimensions[0] = 250 # not possible.

Looping Through All Values in a Tuple
dimensions = (200, 50)
for dimension in dimensions:
    print(dimension)

Writing over a Tuple
dimensions = (200, 50)

You need to change entire tuple.
dimensions = (400, 100)

Exercises: 20:02
Try these short programs to get some firsthand experience with Python’s lists. 
You might want to create a new folder for each chapter’s exercises to keep them organized.

20:25

3-1. Names: Store the names of a few of your friends in a list called names. Print each person’s name 
by accessing each element in the list, one at a time.

3-2. Greetings: Start with the list you used in Exercise 3-1, but instead of just printing each person’s name, print
 a message to them. The text of each message should be the same, but each message
 should be personalized with the person’s name.

3-3. Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list
 that stores several examples. Use your list to print a series of statements about these items,
 such as “I would like to own a Honda motorcycle.”

3-4. Guest List: If you could invite anyone, living or deceased, to dinner, who would you invite?
Make a list that includes at least three people you’d like to invite to dinner. Then use your 
list to print a message to each person, inviting them to dinner.

3-5. Changing Guest List: You just heard that one of your guests can’t make the dinner, so you 
need to send out a new set of invitations. You’ll have to think of someone else to invite.

Start with your program from Exercise 3-4. Add a print() call at the end of your program stating 
the name of the guest who can’t make it. Modify your list, replacing the name of the guest 
who can’t make it with the name of the new person you are inviting. Print a second set of 
invitation messages, one for each person who is still in your list.

3-6. More Guests: You just found a bigger dinner table, so now more space is available. 
Think of three more guests to invite to dinner.

Start with your program from Exercise 3-4 or Exercise 3-5. Add a print() call to the
 end of your program informing people that you found a bigger dinner table.

Use insert() to add one new guest to the beginning of your list.
Use insert() to add one new guest to the middle of your list.
Use append() to add one new guest to the end of your list.
Print a new set of invitation messages, one for each person in your list

3-7. Shrinking Guest List: You just found out that your new dinner table won’t arrive in 
time for the dinner, and you have space for only two guests.

Start with your program from Exercise 3-6. Add a new line that prints a message saying that you 
can invite only two people for dinner.
Use pop() to remove guests from your list one at a time until only two names remain in your list. 
Each time you pop a name from your list, print a message to that person letting them know you’re sorry you can’t 
invite them to dinner.
Print a message to each of the two people still on your list, letting them know they’re still invited.
Use del to remove the last two names from your list, so you have an empty list. 
Print your list to make sure you actually have an empty list at the end of your program.

3-8. Seeing the World: Think of at least five places in the world you’d like to visit.

Store the locations in a list. Make sure the list is not in alphabetical order.
Print your list in its original order. Don’t worry about printing the list neatly,
just print it as a raw Python list.
Use sorted() to print your list in alphabetical order without modifying the actual list.
Show that your list is still in its original order by printing it.
Use sorted() to print your list in reverse alphabetical order without changing the order of the original list.
Show that your list is still in its original order by printing it again.
Use reverse() to change the order of your list. Print the list to show that its order has changed.
Use reverse() to change the order of your list again. Print the list to show it’s back to its original order.
Use sort() to change your list so it’s stored in alphabetical order. Print the list to show that its order has been changed.
Use sort() to change your list so it’s stored in reverse alphabetical order. Print the list to show that its order has changed.

3-9. Dinner Guests: Working with one of the programs from Exercises 3-4 through 3-7 (page 42),
 use len() to print a message indicating the number of people you are inviting to dinner.

3-10. Every Function: Think of something you could store in a list. For example,
 you could make a list of mountains, rivers, countries, cities, languages, or anything
 else you’d like. Write a program that creates a list containing these items and then uses 
each function introduced in this chapter at least once.

3-11. Intentional Error: If you haven’t received an index error in one of your programs yet,
 try to make one happen. Change an index in one of your programs to produce an index error. Make sure
 you correct the error before closing the program

Done 21:52



Chapter 4
-------------
4-1. Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names 
in a list, and then use a for loop to print the name of each pizza.

Modify your for loop to print a sentence using the name of the pizza instead of printing
 just the name of the pizza. For each pizza you should have one line of output containing a
 simple statement like I like pepperoni pizza.

Add a line at the end of your program, outside the for loop, that states how much you like pizza.
 The output should consist of three or more lines about the kinds of pizza you like and
 then an additional sentence, such as I really love pizza!

4-2. Animals: Think of at least three different animals that have a common characteristic. 
Store the names of these animals in a list, and then use a for loop to print out the name of each animal.

Modify your program to print a statement about each animal, such as A dog would make a great pet.

Add a line at the end of your program stating what these animals have in common. 
You could print a sentence such as Any of these animals would make a great pet!

4-3. Counting to Twenty: Use a for loop to print the numbers from 1 to 20, inclusive

4-4. One Million: Make a list of the numbers from one to one million, and then use a for loop to
 print the numbers. (If the output is taking too long, stop it by pressing CTRL-C or by closing the output window.)

4-5. Summing a Million: Make a list of the numbers from one to one million, and 
then use min() and max() to make sure your list actually starts at one and ends at one million. 
Also, use the sum() function to see how quickly Python can add a million numbers.

4-6. Odd Numbers: Use the third argument of the range() function to make 
a list of the odd numbers from 1 to 20. Use a for loop to print each number.

4-7. Threes: Make a list of the multiples of 3 from 3 to 30. 
cUse a for loop to print the numbers in your list.

4-8. Cubes: A number raised to the third power is called a cube. For example, 
the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes 
(that is, the cube of each integer from 1 through 10), and use a for loop to
 print out the value of each cube.

4-9. Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.

4-10. Slices: Using one of the programs you wrote in this chapter, add
 several lines to the end of the program that do the following:

Print the message The first three items in the list are:. 
Then use a slice to print the first three items from that program’s list.

Print the message Three items from the middle of the list are:. 
Use a slice to print three items from the middle of the list.

Print the message The last three items in the list are:. ]
Use a slice to print the last three items in the list.

4-11. My Pizzas, Your Pizzas: Start with your program from Exercise 4-1 (page 56).
 Make a copy of the list of pizzas, and call it friend_pizzas. Then, do the following:

Add a new pizza to the original list.

Add a different pizza to the list friend_pizzas.

Prove that you have two separate lists. Print the message My favorite pizzas are:,
 and then use a for loop to print the first list. Print the message My friend’s favorite pizzas
 are:, and then use a for loop to print the second list. Make sure each new pizza is
 stored in the appropriate list.

4-12. More Loops: All versions of foods.py in this section have avoided using for loops when printing to save space.
 Choose a version of foods.py, and write two for loops to print each list of foods.

4-13. Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.

Use a for loop to print each food the restaurant offers.
Try to modify one of the items, and make sure that Python rejects the change.
The restaurant changes its menu, replacing two of the items with different foods. 
Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.



23:00 Completed chapter 3 and chapter 4 coding.

23:37
Chapter 5 & 6
simple if example:
if car == 'bmw':
     	   print(car.upper())
       else:
           print(car.title())

Checking for in equality
if requested_topping != 'anchovies':
	print("Hold the anchovies!")

Numerical Comparisions
age == 18
age <= 21
age >= 21

Checking Multiple conditions.
 age_0 >= 21 and age_1 >= 2
modified as
(age_0 >= 21) and (age_1 >= 2)
Using or to Check Multiple Conditions
 age_0 >= 21 or age_1 >= 21


Checking Whether a Value Is in a List
'mushrooms' in requested_toppings
whether value is not in a list.
if user not in banned_users:
       print(f"{user.title()}, you can post a response if you wish."

Boolean expressions.
game_active = True
can_edit = False

Multipe if statements.
if condi1:
elif cond2:
else: 
	
Using if statements with Lists
Checking that a list is not empty
requested_toppings = []
if requested_toppings:
	for topping in requested_toppings:
		print(topping)
	print("finfined topping")
else:
	print("re u having a plain bizza


Good algorithm checking with arrays.

available_toppings = ['mushrooms', 'olives', 'green peppers',
                         'pepperoni', 'pineapple', 'extra cheese']
requested_toppings = ['mushrooms', 'french fries', 'extra cheese']

for requested_topping in requested_toppings:
     if requested_topping in available_toppings:
           print(f"Adding {requested_topping}.")
     else:
           print(f"Sorry, we don't have {requested_topping}.")

Styling Your if Statements

5-1. Conditional Tests: Write a series of conditional tests. Print a statement
 describing each test and your prediction for the results of each test. Your code should look something like this:

car = 'subaru'
print("Is car == 'subaru'? I predict True.")
print(car == 'subaru')

print("\nIs car == 'audi'? I predict False.")
print(car == 'audi')

Look closely at your results, and make sure you understand why each line evaluates to True or False.
Create at least ten tests. Have at least five tests evaluate to True and another five tests evaluate to False.


5-2. More Conditional Tests: You don’t have to limit the number of tests you create to ten.
If you want to try more comparisons, write more tests and add them to conditional_tests.py. 
Have at least one True and one False result for each of the following:

09:45
Tests for equality and inequality with strings
Tests using the lower() method
Numerical tests involving equality and inequality, greater than and less than,
 greater than or equal to, and less than or equal to
Tests using the and keyword and the or keyword
Test whether an item is in a list
Test whether an item is not in a list

5-3. Alien Colors #1: Imagine an alien was just shot down in a game. 
Create a variable called alien_color and assign it a value of 'green', 'yellow', or 'red'.

Write an if statement to test whether the alien’s color is green. If it is, print a message
 that the player just earned 5 points. Write one version of this program that passes the if test and another that fails. 
(The version that fails will have no output.)


5-4. Alien Colors #2: Choose a color for an alien as you did in Exercise 5-3, and write an if-else chain.

If the alien’s color is green, print a statement that the player just earned 5 points for shooting the alien.
If the alien’s color isn’t green, print a statement that the player just earned 10 points.
Write one version of this program that runs the if block and another that runs the else block.


5-5. Alien Colors #3: Turn your if-else chain from Exercise 5-4 into an if-elif-else chain.

If the alien is green, print a message that the player earned 5 points.
If the alien is yellow, print a message that the player earned 10 points.
If the alien is red, print a message that the player earned 15 points.
Write three versions of this program, making sure each message is printed for the appropriate color alien.

5-6. Stages of Life: Write an if-elif-else chain that determines a person’s stage of life. 
Set a value for the variable age, and then:

If the person is less than 2 years old, print a message that the person is a baby.
If the person is at least 2 years old but less than 4, print a message that the person is a toddler.
If the person is at least 4 years old but less than 13, print a message that the person is a kid.
If the person is at least 13 years old but less than 20, print a message that the person is a teenager.
If the person is at least 20 years old but less than 65, print a message that the person is an adult.
If the person is age 65 or older, print a message that the person is an elder.


5-7. Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent 
if statements that check for certain fruits in your list.

Make a list of your three favorite fruits and call it favorite_fruits.
Write five if statements. Each should check whether a certain kind of fruit is in your list.
If the fruit is in your list, the if block should print a statement, such as You really like bananas!

5-8. Hello Admin: Make a list of five or more usernames, including the name 'admin'. 
Imagine you are writing code that will print a greeting to each user after they log in to a website.
 Loop through the list, and print a greeting to each user:

If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?
Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.

5-9. No Users: Add an if test to hello_admin.py to make sure the list of users is not empty.

If the list is empty, print the message We need to find some users!
Remove all of the usernames from your list, and make sure the correct message is printed.


5-10. Checking Usernames: Do the following to create a program that simulates how websites 
ensure that everyone has a unique username.

Make a list of five or more usernames called current_users.

Make another list of five usernames called new_users. Make sure one or two of
the new usernames are also in the current_users list.

Loop through the new_users list to see if each new username has already been used. If it has, print a message 
that the person will need to enter a new username. If a username has not been used, print a message 
saying that the username is available.

Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. 
(To do this, you’ll need to make a copy of current_users containing the lowercase versions of all existing users.)

5-11. Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd.
 Most ordinal numbers end in th, except 1, 2, and 3.

Store the numbers 1 through 9 in a list.
Loop through the list.
Use an if-elif-else chain inside the loop to print the proper ordinal ending for each number.
Your output should read "1st 2nd 3rd 4th 5th 6th 7th 8th 9th", and each result should be on a separate line.

5-12. Styling if statements: Review the programs you wrote in this chapter, and make sure you styled 
your conditional tests appropriately.

5-13. Your Ideas: At this point, you’re a more capable programmer than you were when you started this book.
Now that you have a better sense of how real-world situations are modeled in programs, you might be 
thinking of some problems you could solve with your own programs. Record any new ideas you have about problems 
you might want to solve as your programming skills continue to improve. Consider games you might want to write,
data sets you might want to explore, and web applications you’d like to create.

16:30
Chapter 6
----------

A Simple Dictionary
alien_0 = {'color': 'green', 'points': 5}

Working with Dictionaries

Accessing Values in a Dictionary
-------------------
new_points = alien_0['points']


Adding New Key-Value Pairs
-------------------
alien_0['x_position'] = 0
alien_0['y_position'] = 25


Starting with an Empty Dictionary
alien_0 = {}
alien_0['color'] = 'green'
alien_0['points'] = 5

Modifying Values in a Dictionary
alien_0 = {'color': 'green'}
alien_0['color'] = 'yellow'

Removing Key-Value Pairs
del alien_0['points']

A Dictionary of Similar Objects
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }


Using get() to Access Values
you can supply a default value if the value is not found. 

alien_0 = {'color': 'green', 'speed': 'slow'}
point_value = alien_0.get('points', 'No point value assigned.')

Looping Through a Dictionary

Looping Through All Key-Value Pairs
for key, value in user_0.items():
	 print(f"\nKey: {key}")
         print(f"Value: {value}")

Looping Through All the Keys in a Dictionary
favorite_languages = {
       'jen': 'python',
       'sarah': 'c',
       'edward': 'ruby',
       'phil': 'python',
       }


Looping Through a Dictionary’s Keys in a Particular Order
 for name in favorite_languages.keys():
       print(name.title())

Looping Through All Values in a Dictionary:
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }

print("The following languages have been mentioned:")
for language in favorite_languages.values():
    print(language.title())

for language in favorite_languages.values():
    print(language.title())
Nesting

A List of Dictionaries
aliens = []
for alien_number in range(30):
    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
    aliens.append(new_alien)

A List in a Dictionary

pizza = {
       'crust': 'thick',
       'toppings': ['mushrooms', 'extra cheese'],
       }
   # Summarize the order. YOu can use the formatter for accessing hash value. 
print(f"You ordered a {pizza['crust']}-crust pizza "
       "with the following toppings:")

A Dictionary in a Dictionary:
 users = {
       'aeinstein': {
           'first': 'albert',
           'last': 'einstein',
           'location': 'princeton',
           },

       'mcurie': {
           'first': 'marie',
           'last': 'curie',
           'location': 'paris',
           },
       }

for username, user_info in users.items():
     print(f"\nUsername: {username}")
     full_name = f"{user_info['first']} {user_info['last']}"
     location = user_info['location']

     print(f"\tFull name: {full_name.title()}")
     print(f"\tLocation: {location.title()}")




Exercises

17:41 Coding start. 
-------------------

6-1. Person: Use a dictionary to store information about a person you know. Store their first name, last name, 
age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. 
Print each piece of information stored in your dictionary.

6-2. Favorite Numbers: Use a dictionary to store people’s favorite numbers. 
Think of five names, and use them as keys in your dictionary. Think of a favorite number 
for each person, and store each as a value in your dictionary. Print each person’s name and 
their favorite number. For even more fun, poll a few friends and get some actual data for your program.

6-3. Glossary: A Python dictionary can be used to model an actual dictionary. 
However, to avoid confusion, let’s call it a glossary.

Think of five programming words you’ve learned about in the previous chapters. Use these words as the 
keys in your glossary, and store their meanings as values.

Print each word and its meaning as neatly formatted output. You might print the word 
followed by a colon and then its meaning, or print the word on one line and then print i
ts meaning indented on a second line. Use the newline character (\n) to insert a blank line between 
each word-meaning pair in your output.

6-4. Glossary 2: Now that you know how to loop through a dictionary, clean up the code from 
Exercise 6-3 (page 99) by replacing your series of print() calls with a loop that runs through 
the dictionary’s keys and values. When you’re sure that your loop works, add five more Python 
terms to your glossary. When you run your program again, these new words and meanings should automatically
 be included in the output.

6-5. Rivers: Make a dictionary containing three major rivers and the country each river 
runs through. One key-value pair might be 'nile': 'egypt'.

Use a loop to print a sentence about each river, such as The Nile runs through Egypt.
Use a loop to print the name of each river included in the dictionary.
Use a loop to print the name of each country included in the dictionary.

6-6. Polling: Use the code in favorite_languages.py (page 97).
a) 
Make a list of people who should take the favorite languages poll. Include some names 
that are already in the dictionary and some that are not.

b) 
Loop through the list of people who should take the poll.If they have already taken the poll, 
print a message thanking them for responding. If they have not yet taken the poll, print a message 
inviting them to take the poll.

6-7. People: Start with the program you wrote for Exercise 6-1 (page 99). Make two new dictionaries 
representing different people, and store all three dictionaries in a list called people. 
Loop through your list of people. As you loop through the list, print everything you know about each person

6-8. Pets: Make several dictionaries, where each dictionary represents a different pet.
In each dictionary, include the kind of animal and the owner’s name. Store these dictionaries 
in a list called pets. Next, loop through your list and as you do, print everything you know about each pet

6-9. Favorite Places: Make a dictionary called favorite_places. Think of three names to 
use as keys in the dictionary, and store one to three favorite places for each person. 
To make this exercise a bit more interesting, ask some friends to name a few of their favorite places. 
Loop through the dictionary, and print each person’s name and their favorite place

6-10. Favorite Numbers: Modify your program from Exercise 6-2 (page 99) so each person can 
have more than one favorite number. Then print each person’s name along with their favorite numbers.

6-11. Cities: Make a dictionary called cities. Use the names of three cities as keys in your dictionary.
Create a dictionary of information about each city and include the country that the city is in, its
approximate population, and one fact about that city. The keys for each city’s dictionary should be
something like country, population, and fact. Print the name of each city and all of the information you
have stored about it.

6-12. Extensions: We’re now working with examples that are complex enough that they can be
extended in any number of ways. Use one of the example programs from this chapter, and extend it by
adding new keys and values, changing the context of the program or improving the formatting of the
output. 


9:06
Chapter 7
How the input() Function Works
input function pauses the program, prints the message, reads the user input and assigns it to a 
variable. 

Example:
message = input("Tell me something, and I will repeat it back to you: ")
print(message)

Writing Clear Prompts

Using int() to Accept Numerical Input
if a number is given as input. it needs to be converted to integer using int() function.
height = input("How tall are you, in inches? ")
height = int(height)

The Modulo Operator
Gives the reminder of division.
if number % 2 == 0:
    print(f"\nThe number {number} is even.")
else:
    print(f"\nThe number {number} is odd.")

The while Loop in Action

simple while loop. 
current_number = 1
while current_number <=5:
	print(current_number)
	current_number += 1

Letting the User Choose When to Quit
message = ""
while message != "quit":
	message = input(prompt)
	print(message)

Amend this as 
while message != "quit":
	message = input(prompt)
	if message != "quit":
		print(message)


Using a Flag
active = True
while active:
	message = input(prompt)
	if message == "quit":
		active = False
	else 
		print(message)

Using break to Exit a Loop
while True:
	city = input(prompt)
	if city == 'quit':
		break  # break in if loop breaks out of outer while loop
	else: 
		print(city)

Using continue to Exit a Loop
current_number = 0
   while current_number < 10:
	current_number += 1
       if current_number % 2 == 0:
           continue

       print(current_number)

Avoiding Infinite Loops

Using a while Loop with Lists and Dictionaries


Moving Items from One List to Another
unconfirmed_users = ['alice', 'brian', 'candace']  # This itself can be used to test the users.
confirmed_users = []
while unconfirmed_users: # Test returns false when empty.
	 current_user = unconfirmed_users.pop()
	 confirmed_users.append(current_user)



Removing All Instances of Specific Values from a List
pets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']
print(pets)

while 'cat' in pets:
    pets.remove('cat')


Filling a Dictionary with User Input
polling_active = False
responses = {}
while polling_active:
	name = input("\nWhat is your name? ")
       response = input("Which mountain would you like to climb someday? ")

       # Store the response in the dictionary.
	responses[name] = response

       repeat = input("Would you like to let another person respond? (yes/ no) ")
       if repeat == 'no':
           polling_active = False

9:50 done

10:02 Regular expression module in python.
import re

Search
Search the string to see if it starts with "The" and ends with "Spain":


x = re.search("^The.*Spain$", txt)

if x:

search()
import re

txt = "The rain in Spain"
x = re.search("\s", txt)

span() returns a tuple containing the start-, and end positions of the match.

txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.span())

.string returns the string passed into the function
.group() returns the part of the string where there was a match

txt = "The rain in Spain"
x = re.search(r"\w+", txt)
print(x.group())

Returning only the first match.

print("The first white-space character is located in position:", x.start())
txt = "The rain in Spain"  # Returns the index of the start string. 
x = re.search("\s", txt)

print(x)
print("The first white-space character is located in position:", x.start()) 
print("The first white-space character is located in position:", x.end()) 

How to find rest of the matches. 

findall()
txt = "The rain in Spain"
x = re.findall("ai", txt)
print(x) # Returns an array of matched strings. 

split()
txt = "The rain in Spain"
x = re.split("\s", txt, 1) # Based on the regular expression will split it upt.
print(x)

The sub() Function
Replace every white-space character with the number 9:
txt = "The rain in Spain"
x = re.sub("\s", "9", txt)
print(x)

Replace the first 2 occurrences:
txt = "The rain in Spain"
x = re.sub("\s", "9", txt, 2)
print(x)


Regular expressions.
[]	A set of characters	"[a-m]"
.	Any character (except newline character)	"he..o"
^	Starts with	"^hello"
$	Ends with	"world$"
*	Zero or more occurrences	"aix*"
{}	Exactly the specified number of occurrences	"al{2}"
|	Either or	"falls|stays"
()	Capture and group

Special Sequences. For special sequences use r.
\d	Returns a match where the string contains digits (numbers from 0-9)
\b	Word Boundry
r"\bain" (the "r" in the beginning is making sure that the string is being treated as a "raw string")
\B Non word boundry. r"\Bain" Use r
\D	Returns a match where the string DOES NOT contain digits	"\D"
\s	Returns a match where the string contains a white space character	"\s"
\w
\W

\Z and \A are new to me. 
\A at the beginning.  "\AThe"
\Z at the end. "Spain\Z"

Sets
[arn]   match where one of the specified characters (a, r, or n) are present
[a-n]	Returns a match for any lower case character, alphabetically between a and n
[^arn]	Returns a match for any character EXCEPT a, r, and n
[0-9]	Returns a match for any digit between 0 and 9
[0-5][0-9]	Returns a match for any two-digit numbers from 00 and 59
[a-zA-Z]	Returns a match for any character alphabetically between a and z, lower case OR upper case
[+]	In sets, +, *, ., |, (), $,{} has no special meaning, so [+] means: return a match for any + character in the string



Capturing Groups and Backreferences
\b(\w+)\b\s+\1\b 
using it in findall
re.findall(r'\b(\w+)\b\s+\1\b', s) 

fileText = '<text top="52" left="20" width="383" height="15" font="0"><b>test</b></text>'
re.sub("<b>(.*?)</b>", r"\1", fileText, flags=re.DOTALL)

coord_re = re.sub(r"(\d), (\d)", r"\1,\2", coords)

10:15

10:43

7-1. Rental Car: Write a program that asks the user what kind of rental car they would like. 
Print a message about that car, such as “Let me see if I can find you a Subaru.”

7-2. Restaurant Seating: Write a program that asks the user how many people are in their dinner group. 
If the answer is more than eight, print a message saying they’ll have to wait for a table. Otherwise, report that their table is ready.

7-3. Multiples of Ten: Ask the user for a number, and then report whether the number
 is a multiple of 10 or not.

7-4. Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until
 they enter a 'quit' value. As they enter each topping, print a message saying you’ll add that topping to their pizza.

7-5. Movie Tickets: A movie theater charges different ticket prices depending on a person’s age. 
If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; 
and if they are over age 12, the ticket is $15. Write a loop in which you ask users their age, and then tell them the cost of their movie ticket.

7-6. Three Exits: Write different versions of either Exercise 7-4 or Exercise 7-5 that do each of the following at least once:

Use a conditional test in the while statement to stop the loop.
Use an active variable to control how long the loop runs.
Use a break statement to exit the loop when the user enters a 'quit' value.

7-7. Infinity: Write a loop that never ends, and run it. (To end the loop, press CTRL-C or close the window displaying the output.)


7-8. Deli: Make a list called sandwich_orders and fill it with the names of various sandwiches. 
Then make an empty list called finished_sandwiches. Loop through the list of sandwich orders and print a message 
for each order, such as I made your tuna sandwich. As each sandwich is made,
 move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made.

7-9. No Pastrami: Using the list sandwich_orders from Exercise 7-8, make sure the sandwich 'pastrami' appears in the list at least three times. 
Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while 
loop to remove all occurrences of 'pastrami' from sandwich_orders. Make sure no pastrami sandwiches end up in finished_sandwiches.


7-10. Dream Vacation: Write a program that polls users about their dream vacation. 
Write a prompt similar to If you could visit one place in the world, 
where would you go? Include a block of code that prints the results of the poll.

11:50 Done

https://app.codility.com/programmers/lessons/9-maximum_slice_problem/
https://app.codility.com/demo/take-sample-test/
codility test
Codility test

solution([3, 8, 9, 7, 6], 3)

[3, 8, 9, 7, 6] --> [6,3,8,9,7]

    temp [0]= [actual[len(actual) - 1]]
    i = 0
    while i < len(actual)-1:
        temp.append(actual[i])
        i = i +1
